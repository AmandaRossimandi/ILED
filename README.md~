# ILED
Incremental Learning Event Definitions


ILED is an incremental Inductive Logic Programming system. It has been created for constructing event-based knowledge, in the form of Event Calculus theories, but it can practically be used for learning within any domain where ILP is applicable. It is based on Abductive-Inductive Logic Programming and it is implemented in Python 2.7, using an ASL solver (Clingo) as the main reasoning Component. Please consult the following papers to get a grasp on the theory behind ILED:

[ILED's technical report](http://arxiv.org/pdf/1402.5988v2.pdf)

O. Ray. Nonmonotonic Abductive Inductive Learning. Journal of Applied Logic 7(3): 329-340, 2009.

For information on Answer Set Programming (ASP) and the input language of ILED, please consult the material from the [Potsdam Answer Set Solving Team](http://potassco.sourceforge.net/)


To use ILED you need to provide the following with the input:

1) Some background knowledge in ASP format. To do so, edit the /knowledge/bk.lp file with you own input
2) A set of mode declarations. To do so, edit the /knowledge/modes.pl file with your own input. Mode declarations are a widely used language bias in ILP, specifying the syntax of target rules. For more information, please consult the reference papers mentioned above.
3) A set of training examples. To do so, edit the /knowledge/examples.pl. Examples must be provided in the form of ground atoms, wrapped inside an `example` predicate. For instance

`
example(father(john,peter)).
`

